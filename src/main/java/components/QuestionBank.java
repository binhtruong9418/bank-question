/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package components;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import connection.ConnectDB;
import javax.swing.table.DefaultTableModel;
import model.Category;
import model.Question;
import org.openide.util.Exceptions;

/**
 *
 * @author Duc Binh
 */
public class QuestionBank extends javax.swing.JPanel {

    Connection con = null;

    public Integer currentCategory = 0;
    List<Category> listCategory = new ArrayList<>();

    /**
     * Creates new form ListQuestion
     */
    public QuestionBank() {
        initComponents();
        con = ConnectDB.connect();
        initListQuestionsTableData();
        initDropdownCategoryData();
    }

    public void refreshQuestionsTable() {
        // Clear the existing data in the questions table
        // Reload the table with updated data from the database
        initListQuestionsTableData();

        // Update the dropdown category data
        initDropdownCategoryData();
    }

    private void initDropdownCategoryData() {
        selectCategoryDropdown.removeAllItems();
        listCategory.clear();
        String sql = "SELECT * FROM categories";
        try {
            PreparedStatement pre = con.prepareStatement(sql);
            ResultSet rs = pre.executeQuery();

            listCategory.clear(); // Clear the existing category data
            while (rs.next()) {
                int id = rs.getInt("category_id");
                String categoryName = rs.getString("category_name");
                int countQuestion = rs.getInt("category_count_question");
                Category category = new Category();
                category.setId(id);
                category.setCount(countQuestion);
                category.setName(categoryName);
                listCategory.add(category); // Add the updated category to the list

                String toString = category.getName();
                if (category.getCount() != 0) {
                    toString += " (" + category.getCount() + ")";
                }

                selectCategoryDropdown.addItem(toString); // Add the category to the dropdown
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    private void initListQuestionsTableData() {
        DefaultTableModel tableModel = (DefaultTableModel) listQuestionTable.getModel();
        tableModel.setRowCount(0);
        String sql = "SELECT * FROM questions WHERE question_category = ?";
        try {
            PreparedStatement pre = con.prepareStatement(sql);
            pre.setInt(1, currentCategory);
            ResultSet rs = pre.executeQuery();
            if (rs.next()) {
                String questionText = rs.getString("question_text");
                String name = rs.getString("question_name");
                Question question = new Question();
                question.setQuestionText(questionText);
                question.setName(name);
                listQuestionTable.addRow(question.toRowTable());
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listQuestionTitleLabel = new javax.swing.JLabel();
        selectCategoryLabel = new javax.swing.JLabel();
        selectCategoryDropdown = new javax.swing.JComboBox<>();
        categoryDescriptionLabel = new javax.swing.JLabel();
        showSubcategoryCheckbox = new javax.swing.JCheckBox();
        createNewQuestionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listQuestionTable = new components.ListQuestionTable();

        setBackground(new java.awt.Color(255, 255, 255));

        listQuestionTitleLabel.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        listQuestionTitleLabel.setForeground(new java.awt.Color(192, 36, 36));
        org.openide.awt.Mnemonics.setLocalizedText(listQuestionTitleLabel, org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.listQuestionTitleLabel.text")); // NOI18N

        selectCategoryLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(selectCategoryLabel, org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.selectCategoryLabel.text")); // NOI18N

        selectCategoryDropdown.setToolTipText(org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.selectCategoryDropdown.toolTipText")); // NOI18N
        selectCategoryDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCategoryDropdownActionPerformed(evt);
            }
        });

        categoryDescriptionLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(categoryDescriptionLabel, org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.categoryDescriptionLabel.text")); // NOI18N
        categoryDescriptionLabel.setToolTipText(org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.categoryDescriptionLabel.toolTipText")); // NOI18N

        showSubcategoryCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(showSubcategoryCheckbox, org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.showSubcategoryCheckbox.text")); // NOI18N

        createNewQuestionButton.setBackground(new java.awt.Color(7, 116, 163));
        createNewQuestionButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        createNewQuestionButton.setForeground(new java.awt.Color(255, 255, 255));
        org.openide.awt.Mnemonics.setLocalizedText(createNewQuestionButton, org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.createNewQuestionButton.text")); // NOI18N
        createNewQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewQuestionButtonActionPerformed(evt);
            }
        });

        listQuestionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Questions", "Actions"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(listQuestionTable);
        if (listQuestionTable.getColumnModel().getColumnCount() > 0) {
            listQuestionTable.getColumnModel().getColumn(0).setPreferredWidth(1700);
            listQuestionTable.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.listQuestionTable.columnModel.title0")); // NOI18N
            listQuestionTable.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(QuestionBank.class, "QuestionBank.listQuestionTable.columnModel.title1")); // NOI18N
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createNewQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showSubcategoryCheckbox)
                            .addComponent(categoryDescriptionLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectCategoryLabel)
                                .addGap(36, 36, 36)
                                .addComponent(selectCategoryDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(listQuestionTitleLabel))
                        .addContainerGap(635, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(listQuestionTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectCategoryLabel)
                    .addComponent(selectCategoryDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(categoryDescriptionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showSubcategoryCheckbox)
                .addGap(18, 18, 18)
                .addComponent(createNewQuestionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createNewQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewQuestionButtonActionPerformed
        AddQuestionView addquestionview = new AddQuestionView();
        addquestionview.setVisible(true);// TODO add your handling code here:

    }//GEN-LAST:event_createNewQuestionButtonActionPerformed

    private void selectCategoryDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCategoryDropdownActionPerformed
        // TODO add your handling code here:
        int index = selectCategoryDropdown.getSelectedIndex();
        int categoryId = listCategory.get(index).getId();
        currentCategory = categoryId;
        initListQuestionsTableData();
    }//GEN-LAST:event_selectCategoryDropdownActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel categoryDescriptionLabel;
    private javax.swing.JButton createNewQuestionButton;
    private javax.swing.JScrollPane jScrollPane1;
    private components.ListQuestionTable listQuestionTable;
    private javax.swing.JLabel listQuestionTitleLabel;
    private javax.swing.JComboBox<String> selectCategoryDropdown;
    private javax.swing.JLabel selectCategoryLabel;
    private javax.swing.JCheckBox showSubcategoryCheckbox;
    // End of variables declaration//GEN-END:variables
}
